[{"/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/index.js":"1","/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/reportWebVitals.js":"2","/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/App.js":"3","/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/Students.js":"4","/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/Home.js":"5","/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/Profile.js":"6","/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/FindStudents.js":"7","/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/SignUp.js":"8","/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/AssignWork.js":"9","/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/NavBar.js":"10","/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/StudentAssignments.js":"11","/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/LogIn.js":"12","/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/Student.js":"13","/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/AssignmentRow.js":"14","/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/FileButton.js":"15"},{"size":640,"mtime":1685550127322,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1685550127323,"results":"18","hashOfConfig":"17"},{"size":2965,"mtime":1685550127311,"results":"19","hashOfConfig":"17"},{"size":1076,"mtime":1685550127320,"results":"20","hashOfConfig":"17"},{"size":1469,"mtime":1685550127316,"results":"21","hashOfConfig":"17"},{"size":3838,"mtime":1685551798026,"results":"22","hashOfConfig":"17"},{"size":1969,"mtime":1685550127315,"results":"23","hashOfConfig":"17"},{"size":7206,"mtime":1685551937073,"results":"24","hashOfConfig":"17"},{"size":3604,"mtime":1685550127312,"results":"25","hashOfConfig":"17"},{"size":2823,"mtime":1685550127317,"results":"26","hashOfConfig":"17"},{"size":1402,"mtime":1685550127320,"results":"27","hashOfConfig":"17"},{"size":2466,"mtime":1685550127316,"results":"28","hashOfConfig":"17"},{"size":3107,"mtime":1685551921170,"results":"29","hashOfConfig":"17"},{"size":3300,"mtime":1685551840968,"results":"30","hashOfConfig":"17"},{"size":609,"mtime":1685551856751,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1blx9zs",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/index.js",[],["65","66"],"/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/reportWebVitals.js",[],"/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/App.js",["67"],"import \"./App.css\";\nimport { Route, Routes, useNavigate } from \"react-router-dom\";\nimport React, { useState, useEffect, createContext } from \"react\";\nimport NavBar from \"./NavBar\";\nimport Home from \"./Home\";\nimport FindStudents from \"./FindStudents\";\nimport Students from \"./Students\";\nimport AssignWork from \"./AssignWork\";\nimport SignUp from \"./SignUp\";\nimport LogIn from \"./LogIn\";\nimport Profile from \"./Profile\";\nimport StudentAssignments from \"./StudentAssignments\";\n\nexport const UserContext = createContext();\n\nfunction App() {\n  const [errors, setErrors] = useState([]);\n  const [currentUser, setCurrentUser] = useState({});\n  const [students, setStudents] = useState([]);\n  const [avatar, setAvatar] = useState(null);\n\n  const navigate = useNavigate();\n\n  // fetch current user if exists\n  useEffect(() => {\n    fetch(\"/me\").then((resp) => {\n      if (resp.ok) {\n        resp.json().then((user) => {\n          setCurrentUser(user);\n          if (user.type === \"Tutor\") {\n            // new hash map to get unique students\n            let studentsList = [\n              ...new Map(\n                user.students.map((student) => [student[\"id\"], student])\n              ).values(),\n            ];\n            setStudents(studentsList);\n            setErrors([]);\n          } else {\n            // let tutorsList = [\n            //   ...new Map(\n            //     user.tutors.map((tutor) => [tutor[\"id\"], tutor])\n            //   ).values(),\n            // ];\n            setErrors([]);\n          }\n          setAvatar(user.image_url);\n        });\n      } else {\n        resp.json().then((error) => setErrors(error));\n      }\n    });\n  }, []);\n\n  // log out current user and reset state\n  function handleLogOut() {\n    fetch(\"/logout\", {\n      method: \"DELETE\",\n    });\n    setCurrentUser({});\n    setStudents([]);\n    navigate(\"/\");\n  }\n\n  return (\n    <div className='App'>\n      <UserContext.Provider\n        value={{\n          currentUser,\n          setCurrentUser,\n          students,\n          setStudents,\n          avatar,\n          setAvatar,\n          handleLogOut,\n          setErrors,\n        }}\n      >\n        <NavBar />\n        <div>\n          <Routes>\n            <Route exact path='/' element={<Home />} />\n            <Route path='/students' element={<Students />} />\n            <Route path='/assignwork' element={<AssignWork />} />\n            <Route path='/findstudents' element={<FindStudents />} />\n            <Route path='/assignments' element={<StudentAssignments />} />\n            <Route path='/profile' element={<Profile />} />\n            <Route path='/signup' element={<SignUp />} />\n            <Route path='/login' element={<LogIn />} />\n            <Route\n              path='*'\n              element={\n                <>\n                  <h1>404 path not found</h1>\n                </>\n              }\n            />\n          </Routes>\n        </div>\n      </UserContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/Students.js",[],"/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/Home.js",[],"/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/Profile.js",[],"/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/FindStudents.js",[],"/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/SignUp.js",[],"/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/AssignWork.js",["68"],"import React, { useState, useContext } from \"react\";\nimport { UserContext } from \"./App\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { Container, Form, Row, Col, Button } from \"react-bootstrap\";\n\nfunction AssignWork() {\n  const [error, setError] = useState([]);\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { studentId } = location.state;\n  const { currentUser, setStudents } = useContext(UserContext);\n  const [assignmentData, setAssignmentData] = useState({\n    name: \"\",\n    notes: \"\",\n    subject: \"\",\n    tutor_id: currentUser.id,\n    student_id: studentId,\n  });\n  const [file, setFile] = useState(null);\n\n  function handleChange(e) {\n    setAssignmentData({ ...assignmentData, [e.target.name]: e.target.value });\n  }\n\n  function handleFileChange(e) {\n    setFile({ file: e.target.files[0] });\n  }\n\n  function onFormSubmit(e) {\n    e.preventDefault();\n\n    const formData = new FormData();\n\n    for (let data in assignmentData) {\n      formData.append(data, assignmentData[data]);\n    }\n\n    if (file !== null) {\n      formData.append(\"file\", file.file);\n    }\n\n    fetch(\"/assignments\", {\n      method: \"POST\",\n      body: formData,\n    }).then((resp) => {\n      if (resp.ok) {\n        resp.json().then((newAssignment) => {\n          console.log(newAssignment);\n          let studentsList = [\n            ...new Map(\n              newAssignment.tutor.students.map((student) => [\n                student[\"id\"],\n                student,\n              ])\n            ).values(),\n          ];\n          setStudents(studentsList);\n          navigate(\"/students\");\n        });\n      } else {\n        resp.json().then((error) => setError(error.errors));\n      }\n    });\n  }\n\n  return (\n    <Container\n      style={{\n        marginTop: \"24px\",\n        padding: \"24px\",\n        border: \".5px solid grey\",\n        borderRadius: \"8px\",\n        width: \"75%\",\n      }}\n    >\n      <h2\n        style={{\n          border: \".5px solid grey\",\n          marginBottom: \"24px\",\n          borderRadius: \"8px\",\n          padding: \"8px\",\n        }}\n      >\n        Assignment\n      </h2>\n      <Form onSubmit={onFormSubmit}>\n        <Row>\n          <Col>\n            <Form.Label>Name:</Form.Label>\n            <Form.Control\n              type='text'\n              name='name'\n              value={assignmentData.name}\n              onChange={handleChange}\n            />\n          </Col>\n          <Col>\n            <Form.Label>Subject:</Form.Label>\n            <Form.Control\n              type='text'\n              name='subject'\n              value={assignmentData.subject}\n              onChange={handleChange}\n            />\n          </Col>\n        </Row>\n        <Row style={{ marginTop: \"16px\" }}>\n          <Col>\n            <Form.Label>Notes:</Form.Label>\n            <Form.Control\n              as='textarea'\n              name='notes'\n              value={assignmentData.notes}\n              onChange={handleChange}\n            />\n          </Col>\n        </Row>\n        <Row style={{ marginTop: \"16px\" }}>\n          <Col>\n            <Form.Control type='file' name='file' onChange={handleFileChange} />\n          </Col>\n        </Row>\n        <Row\n          style={{\n            margin: \"16px\",\n            justifyContent: \"center\",\n          }}\n        >\n          <Button type='submit' variant='success' style={{ maxWidth: \"33%\" }}>\n            Upload\n          </Button>\n        </Row>\n        {/* {error.map((error) => {\n          return <p key={error}>{error}</p>;\n        })} */}\n      </Form>\n    </Container>\n  );\n}\n\nexport default AssignWork;\n","/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/NavBar.js",[],"/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/StudentAssignments.js",[],"/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/LogIn.js",[],"/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/Student.js",[],"/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/AssignmentRow.js",[],"/Users/mykolavasylyev/Development/Portfolio/tutorplus/tutor-plus/client/src/FileButton.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":17,"column":10,"nodeType":"75","messageId":"76","endLine":17,"endColumn":16},{"ruleId":"73","severity":1,"message":"77","line":7,"column":10,"nodeType":"75","messageId":"76","endLine":7,"endColumn":15},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'errors' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]